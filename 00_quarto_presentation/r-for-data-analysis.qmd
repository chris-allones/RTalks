---
title: "R programming for Data Analysis & Visualization"
author: "Christopher Llones"
format: 
  revealjs:
    theme: [simple, custom.scss]
    code-fold: true
    chalkboard: true
    slide-number: h/v
    footer: "R programming for Data Analysis & Visualization"
from: markdown+emoji
editor: visual
---

```{r include=FALSE}
# Workng directory
setwd("~/GitHub-repo/RTalks/00_quarto_presentation")

# Libraries
library(tidyverse)
library(ggrepel)

# Theme
theme_set(theme_minimal())
theme_update(plot.margin = margin(rep(20, 4)),
             plot.background = element_rect(fill = "white", color = "white"))
```

## Outline

::: incremental
-   Why R?
-   Data visualization
-   Data analysis
:::

# Why R? :smirk:

## The Pros and Cons {.smaller}

::: columns
::: {.column width="60%"}
**Pros**

-   free and open sources
-   excellent for statistical computing and analysis
-   powerful graphics
-   cross-platform support
-   large active and growing community users
-   new statistical method often available first in R
:::

::: {.column width="40%"}
**Cons**

-   learning curve could be steep
-   may consumer large amount of memory
:::
:::

## Who are the R users? {.smaller}

```{r}
#| echo: false
#| fig-align: center
#| fig-width: 7

data_users <- tibble(
  industry = c("Academic", "Healthcare", "Government", "Consulting", "Insurance", "Energy", "Finance", "Retail", "Media", "Manufacturing", "Tech", "Electronics"),
  pct = c(7.8, 6.3, 3.7, 3.5, 2.5, 1.9, 1.8, 1.6, 1.5, 1.1, 0.8, 0.5)
)
data_users %>% 
  mutate(industry = fct_reorder(industry, pct)) %>% 
ggplot(aes(pct, industry)) +
  geom_col(fill = "#1d3557", width = 0.7) +
  scale_x_continuous(labels = scales::number_format(suffix = "%")) +
  theme(axis.text = element_text(size = 14),
        axis.title = element_blank())
```

## Who are the R users? {.smaller}

```{r}
#| echo: false
#| fig-align: center
#| fig-width: 7

data_lang <- tibble(
  lang = c("Python", "R", "SQL", "Scala", "SAS", "JAVA", "Matlab", "Hive", "C/C++", "Pig"),
  pct = c(90.4, 73.4, 58.5, 21.3, 18.1, 16.0, 14.9, 13.8, 7.4, 7.4)
)

data_lang %>% 
  mutate(lang = fct_reorder(lang, pct)) %>% 
ggplot(aes(pct, lang)) +
  geom_col(fill = "#1d3557", width = 0.7) +
  scale_x_continuous(labels = scales::number_format(suffix = "%")) +
  theme(axis.text = element_text(size = 14),
        axis.title = element_blank()) +
  labs(title = "Top 10 data science programming language by percent of jod ads")
```

# Data vizualisation in R

## 

[**Examples of vizualizations made with R**]{.blue}

```{r}
knitr::include_graphics("img/data_viz_collage.png")
```

## Bar plot {.smaller}

::: columns
::: {.column width="40%"}
```{r }
#| eval: false
#| echo: true
#| output-location: column-fragment
#| code-fold: show
#| code-line-numbers: "1-9|11-36"

# Data
int_penetration <- 
  tibble(country = rep(c("Latin America", "Global average", "Southeast Asia", "South Asia", "Sub-Saharan Africa"), 2),
       year = c(rep(2018, 5), rep(2014, 5)),
       pct = c(78, 70, 68, 61, 53, 64, 55, 44, 41, 35)
      ) %>% 
  mutate(year = factor(year) %>% fct_rev()) %>% 
  mutate(country = fct_reorder(country, pct) %>% fct_rev()) %>% 
  mutate(labs = str_glue("{pct}%"))

# Bar plot code
int_penetration %>% 
  ggplot(aes(country, pct)) +
  geom_col(aes(fill = year), position = position_dodge(width = 0.75), width = 0.7) +
  geom_text(aes(label = labs), position = position_dodge2(width = 0.75), 
            vjust = 1.3, hjust = 0.5, size = 7, color = "white") +
  scale_fill_manual(values = c("red", "black")) +
  guides(fill = guide_legend(nrow = 1,
                             label.position = "top",
                             keywidth = unit(25, "mm"),
                             keyheight = unit(1, "mm")
                             )) +
  theme(plot.background = element_rect(fill = "white", color = "white"),
        plot.title = element_text(size = 24, face = "bold", margin = margin(b = 30)),
        plot.caption.position = "plot",
        plot.caption = element_text(hjust = 0, size = 12, face = "bold", color = "gray40", margin = margin(t=15)),
        axis.title.x = element_blank(),
        axis.text.x = element_text(size = 14),
        axis.text.y = element_blank(),
        axis.title.y = element_text(size = 16, color = "gray20"),
        legend.position = "bottom",
        legend.text = element_text(size = 14, face = "bold", margin = margin(b = 5))) +
  labs(title = "Growing mobile internet penetration allows more users to access\nagri e-commerce services",
       y = "% of unique subscribers, mobile internet",
       caption = "Source: GSMA\nAdopted from: Joiner & Okeleke (2019) E-commerce in agriculture: new business models\nfor smallholder's inclusion into formal economy.",
       fill = element_blank())

```
:::

::: {.column width="60%"}
<center>![](img/mobile_penetration.jpeg)</center>
:::
:::


## Scatter plot {.smaller}

:::: {.columns}
::: {.column width="40%"}
```{r}
#| echo: true
#| eval: false
#| code-fold: show

mean_hwy_data <- mpg %>% 
  group_by(class) %>% 
  summarise(mean_hwy = mean(hwy, na.rm = TRUE))
ggplot(data = mpg,
       mapping = aes(x = class, y = hwy, color = class)) +
  geom_point(position = "jitter", size = 3, alpha = 0.5) +
  geom_point(data = mean_hwy_data, aes(y = mean_hwy), size = 7) +
  labs(title = "Fuel consumption per class vehicle",
       x = "Class of vehicle",
       y = "Highway fuel consumption")

```
:::
::: {.column width="60%"}
<center>![](img/scatter_plot.jpeg)</center>
:::
::::




## Bubble plot {.smaller}

:::: {.columns}
::: {.column width="40%"}
```{r}
#| echo: true
#| eval: false
#| code-fold: show

gapminder_data <- gapminder::gapminder

gapminder_data %>% 
  filter(year == 2007) %>% 
  ggplot(aes(x = gdpPercap, 
             y = lifeExp, 
             color = continent)) +
  geom_point(alpha = 0.8, aes(size = pop)) +
  geom_text_repel(aes(label = country),
            size = 3) +
  scale_x_log10(label = scales::dollar_format()) +
  scale_size(range = c(0.1, 20)) +
  labs(title = "Life expectancy vs GDP per capita, 2007",
       x = "GDP per Capita",
       y = "Life Expectancy (years)") +
  theme(plot.margin = unit(rep(0.5, 4), "cm"),
        plot.title = element_text(size = 16,
                                  face = "bold",
                                  margin = margin(b = 20)),
        axis.title.x = element_text(margin = margin(t = 15)),
        axis.title.y = element_text(margin = margin(r = 15)),
        legend.position = "none")
```
:::

::: {.column width="60%"}
<center>![](img/bubble_plot_gapminder.jpeg)</center>
:::
::::


## Word cloud {.smaller}

:::: {.columns}
::: {.column width="40%"}
```{r}
#| echo: true
#| eval: false
#| code-fold: show

ggplot(data = tidy_twitter, 
       aes(label = word, size = n, color = as.character(n))) +
  geom_text_wordcloud() +
  scale_size_area(max_size = 15) +
  scale_color_viridis_d(option = "B", direction = -1) +
  theme_void()

```
:::

::: {.column width="60%"}
<center>![](img/word_cloud_twitter.jpeg)</center>
:::
::::



## APA: line plot {.smaller}

:::: {.columns}
::: {.column width="40%"}
```{r}
#| echo: true
#| eval: false
#| code-fold: show

customer_dbase %>% 
  ggplot(aes(x = ed, y = mean_income)) +
  geom_line(size = 1) +
  scale_x_continuous(limits = c(0, 26),
                     breaks = seq(0, 26, 2),
                     expand = expansion(0)) +
  scale_y_continuous(limits = c(0, 100),
                     breaks = seq(0, 100, 10),
                     labels = scales::dollar_format(),
                     expand = expansion(0)) +
  labs(x = "Years of Education",
       y = "Mean household income\n (in thousands)")

```
:::
::: {.column width="60%"}
<center>![](img/apa_lineplot.jpeg)</center>
:::
::::


## APA: boxplot {.smaller}

:::: {.columns}
::: {.column width="40%"}
```{r}
#| echo: true
#| eval: false
#| code-fold: show

work_prog %>% 
  ggplot(aes(x = ed, y = incaft, fill = gender)) +
  stat_boxplot(geom = "errorbar", 
               width = 0.2,
               position = position_dodge(width  = 0.5)) +
  geom_boxplot(width = 0.3, 
               position = position_dodge(width = 0.5),
               outlier.shape = 1,
               outlier.size = 3) +
  scale_y_continuous(breaks = seq(0, 40, 2), 
                     limits = c(0, 40),
                     expand = expansion(0)) +
  scale_fill_manual(name = "Gender",
                  values = c("grey40", "grey80")) +
  labs(y = "Income after the program",
       x = "Level of Education")

```
:::
::: {.column width="60%"}
<center>![](img/apa_boxplot.jpeg)</center>
:::
::::


## APA: barplot {.smaller}

:::: {.columns}
::: {.column width="40%"}
```{r}
#| echo: true
#| eval: false
#| code-fold: show

employee %>% 
  ggplot(aes(x = gender, y = mean_salary, fill = jobcat)) +
  geom_col(position = position_dodge(width = 0.6),
           width = 0.5,
           color = "black") +
  geom_errorbar(aes(ymin = mean_salary - sd_salary, ymax = mean_salary + sd_salary),
                position = position_dodge(width = 0.6),
                width = 0.1) +
  scale_y_continuous(expand = expansion(0),
                     limits = c(0, 100000),
                     breaks = seq(0, 100000, 20000),
                     labels = scales::dollar_format()) +
  scale_fill_manual(values = c("#FAFAFA", "#D4D4D4", "#737373")) +
  labs(y = "Average annual salary",
       x = "Gender",
       fill = "Job category")

```
:::
::: {.column width="60%"}
<center>![](img/apa_bar_plot.jpeg)</center>
:::
::::












